pipeline {
    agent any
    tools{
        jdk 'jdk-21.0.5'
        maven 'maven-3.8.7'
    }

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-marouanedbibih'  
        DOCKER_IMAGE_NAME = 'marouanedbibih/ace-client-ms'  
        DOCKER_TAG = 'consul-feign' 

        // SonarScanner configuration
        SCANNER_HOME = tool 'sonarqube-scanner'

        // Server configuration
        SERVER_IP = '15.237.197.214'
        SSH_USER = 'ubuntu' // SSH username
        SSH_KEY = credentials('ubuntu-server')
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'dev', credentialsId: 'github', url: 'https://github.com/Devolpex/cognitive-finder'
            }
        }
        
        stage('Run Tests') {
            steps {
                dir('patient-ms') {
                    sh 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('patient-ms') {
                    withSonarQubeEnv('sonarqube') {
                sh """
                    # Run tests and generate coverage report
                    mvn clean test jacoco:report

                    # Run the SonarQube scanner
                    ${SCANNER_HOME}/bin/sonar-scanner \
                    -Dsonar.projectName=patient-microservice \
                    -Dsonar.projectKey=patient-microservice \
                    -Dsonar.sources=src/main/java\
                    -Dsonar.tests=src/test/java \
                    -Dsonar.test.inclusions=**/*Test*/** \
                    -Dsonar.java.binaries=target/classes \
                    -Dsonar.jacoco.reportPaths=target/site/jacoco/jacoco.xml
                """
                    }
                }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                  waitForQualityGate abortPipeline: false, credentialsId: 'sonarqube-server' 
                }
            }
        }
        

        stage('Build JAR') {
            steps {
                dir('patient-ms') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('patient-ms') {
                    script {
                        sh """
                            docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_TAG} .
                        """
                    }
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    // Login to Docker Hub (using Jenkins credentials)
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            echo \$DOCKER_PASSWORD | docker login -u \$DOCKER_USERNAME --password-stdin
                            docker push ${DOCKER_IMAGE_NAME}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Deploy to Server') {
            steps {
                script {
                    // SSH to the server and run commands
                    sh """
                    # SSH into the server to perform deployment steps
                    ssh -o StrictHostKeyChecking=no -i \${SSH_KEY} ${SSH_USER}@${SERVER_IP} << EOF
                    echo 'Shutting down Docker Compose containers...'
                    cd /home/ubuntu/production || exit 1
                    echo 'Stopping Docker Compose...'
                    docker compose down || exit 1
                    echo 'Pulling Docker Compose...'
                    docker compose pull || exit 1
                    echo 'Starting Docker Compose...'
                    docker compose up -d || exit 1
                    exit
                    EOF
                    """
                }
            }
}


    }
}